MessageNotUnderstood: WindowsProcess>>forkJob:arguments:environment:descriptors:15 June 2020 9:37:10.288 pmVM: Win32 - SmalltalkImage: Squeak4.5 [latest update: #1]SecurityManager state:Restricted: falseFileAccess: trueSocketAccess: trueWorking Dir C:\coding\HPI\masterthesis\github\imageTrusted Dir C:\coding\HPI\masterthesis\github\image\betasheetUntrusted Dir C:\Users\betasheet\Documents\My SqueakWindowsProcess(Object)>>doesNotUnderstand: #forkJob:arguments:environment:descriptors:	Receiver: a WindowsProcess with pid 468	Arguments and temporary variables: 		aMessage: 	forkJob: '/usr/bin/curl' arguments: #('-L' 'https://github.com/krono/...etc...		exception: 	MessageNotUnderstood: WindowsProcess>>forkJob:arguments:environment:...etc...		resumeValue: 	nil	Receiver's instance variables: 		pid: 	468		sessionID: 	#[243 53 229 114]		stdIn: 	AttachableFileStream: 'stdin'		stdOut: 	AttachableFileStream: 'stdout'		stdErr: 	AttachableFileStream: 'stderr'		processAccessor: 	a WindowsOSProcessAccessor		allMyChildren: 	an OrderedCollection()		accessProtect: 	a Semaphore()		processHandle: 	#[255 255 255 255]		environment: 	a Dictionary(#''->'::\' #ALLUSERSPROFILE->'C:\ProgramData' #APPDAT...etc...		mainThread: 	a WindowsThread (468, running)		threads: 	an OrderedCollection()MetacelloSqueakPlatform>>downloadFile:to:	Receiver: a MetacelloSqueakPlatform	Arguments and temporary variables: 		url: 	'https://github.com/krono/filetree/zipball/48a986627bba1b64024fdd0a7c4d331...etc...		outputFileName: 	'/tmp/github-kronofiletree48a986627bba1b64024fdd0a7c4d3314b2d54...etc...		in: 	a ReadStream		out: 	MultiByteFileStream: 'C:\coding\HPI\masterthesis\github\image\#tmp#github-...etc...		err: 	MultiByteFileStream: 'C:\coding\HPI\masterthesis\github\image\#tmp#curl.er...etc...		proc: 	nil		archive: 	nil		zipfile: 	nil	Receiver's instance variables: 		bypassProgressBars: 	false		bypassGoferLoadUpdateCategories: 	falseMCGitHubRepository class>>projectDirectoryFrom:version:	Receiver: MCGitHubRepository	Arguments and temporary variables: 		projectPath: 	'krono/filetree'		versionString: 	'48a986627bba1b64024fdd0a7c4d3314b2d545c0'		mcPlatform: 	a MetacelloSqueakPlatform		githubCacheDirectory: 	DosFileDirectory on 'C:\coding\HPI\masterthesis\github\im...etc...		projectDirectory: 	nil		downloadCacheKey: 	'krono/filetree:::48a986627bba1b64024fdd0a7c4d3314b2d545c0'		cachePath: 	nil		url: 	'https://github.com/krono/filetree/zipball/48a986627bba1b64024fdd0a7c4d331...etc...		archive: 	nil		directory: 	nil		zipFileName: 	'/tmp/github-kronofiletree48a986627bba1b64024fdd0a7c4d3314b2d545c0...etc...	Receiver's instance variables: 		superclass: 	MCFileTreeRepository		methodDict: 	a MethodDictionary(#asRepositorySpecFor:->(MCGitHubRepository>>#asR...etc...		format: 	154		instanceVariables: 	#('projectPath' 'projectVersion' 'repoPath')		organization: 	('accessing' asRepositorySpecFor: directory metacelloProjectClass...etc...		subclasses: 	nil		name: 	#MCGitHubRepository		classPool: 	a Dictionary(#CacheDirectory->DosFileDirectory on 'C:\coding\HPI\mas...etc...		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Metacello-GitHub'		defaultPackageExtension: 	nil		defaultPropertyFileExtension: 	nilMCGitHubRepository>>directory	Receiver: a MCGitHubRepository(github://krono/filetree:48a986627bba1b64024fdd0a7c4d3314b2d545c0/repo...etc...	Arguments and temporary variables: 	Receiver's instance variables: 		creationTemplate: 	nil		storeDiffs: 	nil		cache: 	nil		allFileNamesCache: 	nil		allVersionNamesCache: 	nil		directory: 	nil		readonly: 	true		repositoryProperties: 	a Dictionary('packageExtension'->'.package' )		versionNameToFileNameMap: 	a Dictionary()		projectPath: 	'krono/filetree'		projectVersion: 	'48a986627bba1b64024fdd0a7c4d3314b2d545c0'		repoPath: 	'repository'MCGitHubRepository(MCFileTreeRepository)>>allFileNames	Receiver: a MCGitHubRepository(github://krono/filetree:48a986627bba1b64024fdd0a7c4d3314b2d545c0/repo...etc...	Arguments and temporary variables: 	Receiver's instance variables: 		creationTemplate: 	nil		storeDiffs: 	nil		cache: 	nil		allFileNamesCache: 	nil		allVersionNamesCache: 	nil		directory: 	nil		readonly: 	true		repositoryProperties: 	a Dictionary('packageExtension'->'.package' )		versionNameToFileNameMap: 	a Dictionary()		projectPath: 	'krono/filetree'		projectVersion: 	'48a986627bba1b64024fdd0a7c4d3314b2d545c0'		repoPath: 	'repository'MCGitHubRepository(MCFileBasedRepository)>>cacheAllFilenames	Receiver: a MCGitHubRepository(github://krono/filetree:48a986627bba1b64024fdd0a7c4d3314b2d545c0/repo...etc...	Arguments and temporary variables: 	Receiver's instance variables: 		creationTemplate: 	nil		storeDiffs: 	nil		cache: 	nil		allFileNamesCache: 	nil		allVersionNamesCache: 	nil		directory: 	nil		readonly: 	true		repositoryProperties: 	a Dictionary('packageExtension'->'.package' )		versionNameToFileNameMap: 	a Dictionary()		projectPath: 	'krono/filetree'		projectVersion: 	'48a986627bba1b64024fdd0a7c4d3314b2d545c0'		repoPath: 	'repository'MCGitHubRepository(MCFileBasedRepository)>>cacheAllFileNamesDuring:	Receiver: a MCGitHubRepository(github://krono/filetree:48a986627bba1b64024fdd0a7c4d3314b2d545c0/repo...etc...	Arguments and temporary variables: 		aBlock: 	[closure] in MCFileRepositoryInspector(MCRepositoryInspector)>>packageL...etc...	Receiver's instance variables: 		creationTemplate: 	nil		storeDiffs: 	nil		cache: 	nil		allFileNamesCache: 	nil		allVersionNamesCache: 	nil		directory: 	nil		readonly: 	true		repositoryProperties: 	a Dictionary('packageExtension'->'.package' )		versionNameToFileNameMap: 	a Dictionary()		projectPath: 	'krono/filetree'		projectVersion: 	'48a986627bba1b64024fdd0a7c4d3314b2d545c0'		repoPath: 	'repository'MCFileRepositoryInspector(MCRepositoryInspector)>>packageList	Receiver: a MCFileRepositoryInspector	Arguments and temporary variables: 		loadedPackages: 	nil		result: 	#(nil)	Receiver's instance variables: 		dependents: 	nil		morph: 	nil		label: 	nil		modalProcess: 	nil		modalValue: 	nil		version: 	nil		repository: 	a MCGitHubRepository(github://krono/filetree:48a986627bba1b64024fdd...etc...		packageNames: 	nil		versionNames: 	nil		selectedPackage: 	nil		selectedVersion: 	nil		order: 	5		versionInfo: 	nil		loaded: 	a Set()		newer: 	nil		inherited: 	a Set()		allVersionNames: 	nilMCFileRepositoryInspector(MCRepositoryInspector)>>packageSelection:	Receiver: a MCFileRepositoryInspector	Arguments and temporary variables: 		aNumber: 	1	Receiver's instance variables: 		dependents: 	nil		morph: 	nil		label: 	nil		modalProcess: 	nil		modalValue: 	nil		version: 	nil		repository: 	a MCGitHubRepository(github://krono/filetree:48a986627bba1b64024fdd...etc...		packageNames: 	nil		versionNames: 	nil		selectedPackage: 	nil		selectedVersion: 	nil		order: 	5		versionInfo: 	nil		loaded: 	a Set()		newer: 	nil		inherited: 	a Set()		allVersionNames: 	nilMCFileRepositoryInspector(MCRepositoryInspector)>>setRepository:workingCopy:	Receiver: a MCFileRepositoryInspector	Arguments and temporary variables: 		aFileBasedRepository: 	a MCGitHubRepository(github://krono/filetree:48a986627bba...etc...		aWorkingCopy: 	nil	Receiver's instance variables: 		dependents: 	nil		morph: 	nil		label: 	nil		modalProcess: 	nil		modalValue: 	nil		version: 	nil		repository: 	a MCGitHubRepository(github://krono/filetree:48a986627bba1b64024fdd...etc...		packageNames: 	nil		versionNames: 	nil		selectedPackage: 	nil		selectedVersion: 	nil		order: 	5		versionInfo: 	nil		loaded: 	a Set()		newer: 	nil		inherited: 	a Set()		allVersionNames: 	nilMCFileRepositoryInspector class(MCRepositoryInspector class)>>repository:workingCopy:	Receiver: MCFileRepositoryInspector	Arguments and temporary variables: 		aFileBasedRepository: 	a MCGitHubRepository(github://krono/filetree:48a986627bba...etc...		aWorkingCopy: 	nil	Receiver's instance variables: 		superclass: 	MCRepositoryInspector		methodDict: 	a MethodDictionary(#allVersionNames->(MCFileRepositoryInspector>>#a...etc...		format: 	164		instanceVariables: 	#('allVersionNames')		organization: 	('morphic ui' versionSummary)('private' allVersionNames initiali...etc...		subclasses: 	nil		name: 	#MCFileRepositoryInspector		classPool: 	a Dictionary()		sharedPools: 	nil		environment: 	Smalltalk		category: 	#'Monticello-UI'MCGitHubRepository(MCFileBasedRepository)>>morphicOpen:	Receiver: a MCGitHubRepository(github://krono/filetree:48a986627bba1b64024fdd0a7c4d3314b2d545c0/repo...etc...	Arguments and temporary variables: 		aWorkingCopy: 	nil	Receiver's instance variables: 		creationTemplate: 	nil		storeDiffs: 	nil		cache: 	nil		allFileNamesCache: 	nil		allVersionNamesCache: 	nil		directory: 	nil		readonly: 	true		repositoryProperties: 	a Dictionary('packageExtension'->'.package' )		versionNameToFileNameMap: 	a Dictionary()		projectPath: 	'krono/filetree'		projectVersion: 	'48a986627bba1b64024fdd0a7c4d3314b2d545c0'		repoPath: 	'repository'MCWorkingCopyBrowser>>openRepository	Receiver: a MCWorkingCopyBrowser	Arguments and temporary variables: 		repos: 	a MCGitHubRepository(github://krono/filetree:48a986627bba1b64024fdd0a7c4...etc...	Receiver's instance variables: 		dependents: 	a DependentsArray(a PluggableSystemWindow(3087) a PluggableButtonMo...etc...		morph: 	nil		label: 	nil		modalProcess: 	nil		modalValue: 	nil		workingCopy: 	nil		workingCopyWrapper: 	nil		repository: 	a MCGitHubRepository(github://krono/filetree:48a986627bba1b64024fdd...etc...		defaults: 	a Dictionary(a MCWorkingCopy(AppSpaces-Core)->a MCCacheRepository(C:\...etc...PluggableButtonMorphPlus(PluggableButtonMorph)>>performAction	Receiver: a PluggableButtonMorphPlus(3940)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	555@126 corner: 599@152		owner: 	a PluggablePanelMorph(1333)		submorphs: 	{an AlignmentMorph(2573)}		fullBounds: 	555@126 corner: 599@152		color: 	(Color r: 0.906 g: 0.906 b: 0.906)		extension: 	a MorphExtension (4055) [balloonText]  [other:  (layoutPolicy -> a T...etc...		borderWidth: 	1		borderColor: 	Color gray		model: 	a MCWorkingCopyBrowser		label: 	'Open'		getStateSelector: 	#buttonSelected		actionSelector: 	#openRepository		getLabelSelector: 	nil		getMenuSelector: 	nil		shortcutCharacter: 	nil		askBeforeChanging: 	false		triggerOnMouseDown: 	false		offColor: 	Color white		onColor: 	Color veryLightGray		feedbackColor: 	Color red		showSelectionFeedback: 	false		allButtons: 	{a PluggableButtonMorphPlus(2707) . a PluggableButtonMorphPlus(3921...etc...		arguments: 	nil		argumentsProvider: 	nil		argumentsSelector: 	nil		style: 	nil		enabled: 	true		action: 	nil		getColorSelector: 	nil		getEnabledSelector: 	#hasRepository		updateMap: 	nilPluggableButtonMorphPlus>>performAction	Receiver: a PluggableButtonMorphPlus(3940)	Arguments and temporary variables: 	Receiver's instance variables: 		bounds: 	555@126 corner: 599@152		owner: 	a PluggablePanelMorph(1333)		submorphs: 	{an AlignmentMorph(2573)}		fullBounds: 	555@126 corner: 599@152		color: 	(Color r: 0.906 g: 0.906 b: 0.906)		extension: 	a MorphExtension (4055) [balloonText]  [other:  (layoutPolicy -> a T...etc...		borderWidth: 	1		borderColor: 	Color gray		model: 	a MCWorkingCopyBrowser		label: 	'Open'		getStateSelector: 	#buttonSelected		actionSelector: 	#openRepository		getLabelSelector: 	nil		getMenuSelector: 	nil		shortcutCharacter: 	nil		askBeforeChanging: 	false		triggerOnMouseDown: 	false		offColor: 	Color white		onColor: 	Color veryLightGray		feedbackColor: 	Color red		showSelectionFeedback: 	false		allButtons: 	{a PluggableButtonMorphPlus(2707) . a PluggableButtonMorphPlus(3921...etc...		arguments: 	nil		argumentsProvider: 	nil		argumentsSelector: 	nil		style: 	nil		enabled: 	true		action: 	nil		getColorSelector: 	nil		getEnabledSelector: 	#hasRepository		updateMap: 	nil[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:	Receiver: a PluggableButtonMorphPlus(3940)	Arguments and temporary variables: 		evt: 	a PluggableButtonMorphPlus(3940)		m: 	[582@142 mouseUp 103115375]	Receiver's instance variables: 		bounds: 	555@126 corner: 599@152		owner: 	a PluggablePanelMorph(1333)		submorphs: 	{an AlignmentMorph(2573)}		fullBounds: 	555@126 corner: 599@152		color: 	(Color r: 0.906 g: 0.906 b: 0.906)		extension: 	a MorphExtension (4055) [balloonText]  [other:  (layoutPolicy -> a T...etc...		borderWidth: 	1		borderColor: 	Color gray		model: 	a MCWorkingCopyBrowser		label: 	'Open'		getStateSelector: 	#buttonSelected		actionSelector: 	#openRepository		getLabelSelector: 	nil		getMenuSelector: 	nil		shortcutCharacter: 	nil		askBeforeChanging: 	false		triggerOnMouseDown: 	false		offColor: 	Color white		onColor: 	Color veryLightGray		feedbackColor: 	Color red		showSelectionFeedback: 	false		allButtons: 	{a PluggableButtonMorphPlus(2707) . a PluggableButtonMorphPlus(3921...etc...		arguments: 	nil		argumentsProvider: 	nil		argumentsSelector: 	nil		style: 	nil		enabled: 	true		action: 	nil		getColorSelector: 	nil		getEnabledSelector: 	#hasRepository		updateMap: 	nilArray(SequenceableCollection)>>do:	Receiver: {a PluggableButtonMorphPlus(2707) . a PluggableButtonMorphPlus(3921) . a PluggableButtonMo...etc...	Arguments and temporary variables: 		aBlock: 	[closure] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:		index: 	9		indexLimiT: 	9	Receiver's instance variables: {a PluggableButtonMorphPlus(2707) . a PluggableButtonMorphPlus(3921) . a PluggableButtonMo...etc...PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:	Receiver: a PluggableButtonMorphPlus(3940)	Arguments and temporary variables: 		evt: 	[582@142 mouseUp 103115375]	Receiver's instance variables: 		bounds: 	555@126 corner: 599@152		owner: 	a PluggablePanelMorph(1333)		submorphs: 	{an AlignmentMorph(2573)}		fullBounds: 	555@126 corner: 599@152		color: 	(Color r: 0.906 g: 0.906 b: 0.906)		extension: 	a MorphExtension (4055) [balloonText]  [other:  (layoutPolicy -> a T...etc...		borderWidth: 	1		borderColor: 	Color gray		model: 	a MCWorkingCopyBrowser		label: 	'Open'		getStateSelector: 	#buttonSelected		actionSelector: 	#openRepository		getLabelSelector: 	nil		getMenuSelector: 	nil		shortcutCharacter: 	nil		askBeforeChanging: 	false		triggerOnMouseDown: 	false		offColor: 	Color white		onColor: 	Color veryLightGray		feedbackColor: 	Color red		showSelectionFeedback: 	false		allButtons: 	{a PluggableButtonMorphPlus(2707) . a PluggableButtonMorphPlus(3921...etc...		arguments: 	nil		argumentsProvider: 	nil		argumentsSelector: 	nil		style: 	nil		enabled: 	true		action: 	nil		getColorSelector: 	nil		getEnabledSelector: 	#hasRepository		updateMap: 	nilPluggableButtonMorphPlus>>mouseUp:	Receiver: a PluggableButtonMorphPlus(3940)	Arguments and temporary variables: 		evt: 	[582@142 mouseUp 103115375]	Receiver's instance variables: 		bounds: 	555@126 corner: 599@152		owner: 	a PluggablePanelMorph(1333)		submorphs: 	{an AlignmentMorph(2573)}		fullBounds: 	555@126 corner: 599@152		color: 	(Color r: 0.906 g: 0.906 b: 0.906)		extension: 	a MorphExtension (4055) [balloonText]  [other:  (layoutPolicy -> a T...etc...		borderWidth: 	1		borderColor: 	Color gray		model: 	a MCWorkingCopyBrowser		label: 	'Open'		getStateSelector: 	#buttonSelected		actionSelector: 	#openRepository		getLabelSelector: 	nil		getMenuSelector: 	nil		shortcutCharacter: 	nil		askBeforeChanging: 	false		triggerOnMouseDown: 	false		offColor: 	Color white		onColor: 	Color veryLightGray		feedbackColor: 	Color red		showSelectionFeedback: 	false		allButtons: 	{a PluggableButtonMorphPlus(2707) . a PluggableButtonMorphPlus(3921...etc...		arguments: 	nil		argumentsProvider: 	nil		argumentsSelector: 	nil		style: 	nil		enabled: 	true		action: 	nil		getColorSelector: 	nil		getEnabledSelector: 	#hasRepository		updateMap: 	nil--- The full stack ---WindowsProcess(Object)>>doesNotUnderstand: #forkJob:arguments:environment:descriptors:MetacelloSqueakPlatform>>downloadFile:to:MCGitHubRepository class>>projectDirectoryFrom:version:MCGitHubRepository>>directoryMCGitHubRepository(MCFileTreeRepository)>>allFileNamesMCGitHubRepository(MCFileBasedRepository)>>cacheAllFilenamesMCGitHubRepository(MCFileBasedRepository)>>cacheAllFileNamesDuring:MCFileRepositoryInspector(MCRepositoryInspector)>>packageListMCFileRepositoryInspector(MCRepositoryInspector)>>packageSelection:MCFileRepositoryInspector(MCRepositoryInspector)>>setRepository:workingCopy:MCFileRepositoryInspector class(MCRepositoryInspector class)>>repository:workingCopy:MCGitHubRepository(MCFileBasedRepository)>>morphicOpen:MCWorkingCopyBrowser>>openRepositoryPluggableButtonMorphPlus(PluggableButtonMorph)>>performActionPluggableButtonMorphPlus>>performAction[] in PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:Array(SequenceableCollection)>>do:PluggableButtonMorphPlus(PluggableButtonMorph)>>mouseUp:PluggableButtonMorphPlus>>mouseUp: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -PluggableButtonMorphPlus(Morph)>>handleMouseUp:MouseButtonEvent>>sentTo:PluggableButtonMorphPlus(Morph)>>handleEvent:PluggableButtonMorphPlus(Morph)>>handleFocusEvent:[] in HandMorph>>sendFocusEvent:to:clear:BlockClosure>>on:do:PasteUpMorph>>becomeActiveDuring:HandMorph>>sendFocusEvent:to:clear:HandMorph>>sendEvent:focus:clear:HandMorph>>sendMouseEvent:HandMorph>>handleEvent:HandMorph>>processEvents[] in WorldState>>doOneCycleNowFor:Array(SequenceableCollection)>>do:WorldState>>handsDo:WorldState>>doOneCycleNowFor:WorldState>>doOneCycleFor:PasteUpMorph>>doOneCycle[] in MorphicProject>>spawnNewProcess[] in BlockClosure>>newProcess